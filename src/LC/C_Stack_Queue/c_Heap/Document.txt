


    优先队列是一种抽象的数据类型，而堆是一种数据结构。所以堆并不是优先队列，堆是实现优先队列的一种方式。
    二叉堆是优先队列的一种实现方式，java priorityQueue是基于这个实现的


    堆

    根据 维基百科 的定义，堆 是一种特别的二叉树，满足以下条件的二叉树，可以称之为 堆：

    1)完全二叉树；
    2)每一个节点的值都必须 大于等于或者小于等于 其孩子节点的值。

    具有以下的特点：
    可以在 O(logN) 的时间复杂度内向 堆 中插入元素；可以在 O(logN) 的时间复杂度内向 堆 中删除元素；
    可以在 O(1) 的时间复杂度内获取 堆 中的最大值或最小值。

    最高效获得当前数据集中最大或最小的元素
    是一种特别的二叉树

    分为最大堆 ： 堆中每一个节点的值 都大于等于 其孩子节点的值。所以最大堆的特性是 堆顶元素（根节点）是堆中的最大值。
       最小堆 ：堆中每一个节点的值 都小于等于 其孩子节点的值。所以最小堆的特性是 堆顶元素（根节点）是堆中的最小值。

    Java中初始化堆
    最大堆：PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a, b) -> b - a);
    最小堆：PriorityQueue<Integer> minHeap = new PriorityQueue<>();
    初始化带值的堆：PriorityQueue<Integer> heapWithValues= new PriorityQueue<>(Arrays.asList(3,1,2));

    创建堆：时间复杂度 O(N)
    插入元素：minHeap.add(1);   时间复杂度 O(logN)
    删除堆顶元素：minHeap.poll();  时间复杂度 O(logN)
    获取堆顶元素：minHeap.peek();  时间复杂度 O(1)
    获取堆长度：minHeap.size();    时间复杂度 O(1)

    堆排序：时间复杂度 O(NlogN)

    堆排序指的是利用堆的数据结构对一组无序元素进行排序。
    将所有元素堆化成一个 最小堆 ；
    取出并删除堆顶元素，并将该堆顶元素放置在存储有序元素的数据集 T 中；
    此时，堆 会调整成新的 最小堆；
    重复 3 和 4 步骤，直到 堆 中没有元素；

    Top k 问题用相反的大小堆做
    top k 最大  --- 用k个元素的最小堆

    top k 最小  --- 用k个元素的最大堆
    创建一个大小为 K 的「最大堆」；
    依次将元素添加到「最大堆」中；
    当「最大堆」的元素个数达到 K 时，将当前元素与堆顶元素进行对比：
        如果当前元素大堆顶元素，则放弃当前元素，继续进行下一个元素；
        如果当前元素小于堆顶元素，则删除堆顶元素，将当前元素加入到「最小堆」中。
    重复步骤 2 和步骤 3，直到所有元素遍历完毕。
    此时「最大堆」中的 K 个元素就是前 K 个最小的元素。





