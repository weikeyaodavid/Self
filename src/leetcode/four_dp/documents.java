package leetcode.four_dp;

public class documents {


//    贪心：每一步的最优解一定包含上一步的最优解，上一步之前的最优解无需记录
//    动态规划：全局最优解中一定包含某个局部最优解，但不一定包含上一步的局部最优解，因此需要记录之前的所有的局部最优解

//    贪心：如果把所有的子问题看成一棵树的话，贪心从根出发，每次向下遍历最优子树即可，这里的最优是贪心意义上的最优。此时不需要知道一个节点的所有子树情况，于是构不成一棵完整的树
//    动态规划：动态规划需要对每一个子树求最优解，直至下面的每一个叶子的值，最后得到一棵完整的树，在所有子树都得到最优解后，将他们组合成答案结果正确性

//    贪心不能保证求得的最后解是最佳的，复杂度低
//    动态规划本质是穷举法，可以保证结果是最佳的，复杂度高

//    贪心：子问题只有一个，只解一个
//    动态规划：子问题有很多重复，全部都要解

}
