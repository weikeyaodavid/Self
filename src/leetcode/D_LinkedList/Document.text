

    链表

    分为单链表和双链表

    public class SinglyListNode {
        int val;
        SinglyListNode next;
        SinglyListNode(int x) { val = x; }
    }

    链表优势  插入删除快  O(1)
    数组优势  快速实现随机读写



    链表解题经典三板斧，哑巴节点，栈，快慢指针。

    在对链表进行操作时，一种常用的技巧是添加一个哑节点（dummy node），它的 next 指针指向链表的头节点。
    这样一来，我们就不需要对头节点进行特殊的判断了


    链表有很多逻辑题，画图找规律更直观


    深度复制问题可使用哈希表作为新旧元素一一对应

    链表排序  ---  并归排序 （切分 -> 递归 -> 合并） 复杂度nlogn
    快慢指针初始化问题
    这种情况slow指针会指向中点偏左   并归时用slow.next
    ListNode slow = head;
    ListNode fast = head.next;
    while(fast != null && fast.next != null)

    若这样slow指针会指向中点偏右    并归时需要用一个pre指向slow之前的位置
    ListNode slow = head;
    ListNode fast = head;
    while(fast != null && fast.next != null)

